<?xml version="1.0" encoding="UTF-8"?>
<project name="vtemplate" default="main">
    <property file="build.properties" />

    <target name="init" description="Prepares output directories for Phing">
        <exec command="rm -rf ${dir.build}" passthru="true" />
        <mkdir dir="${dir.build}" />
        <mkdir dir="${dir.make}" />
        <mkdir dir="${dir.install}" />
        <mkdir dir="${dir.docs}" />
        <mkdir dir="${dir.reports}" />
    </target>

    <target name="make" description="Make the application">
        <mkdir dir="${dir.make}" />
        <delete file="composer.phar" />
        <delete dir="vendor/" />
        <exec command="git submodule update --init --recursive" passthru="true" />
        <exec command="curl -s https://getcomposer.org/installer | php" passthru="true" />
        <exec command="php composer.phar install --no-dev" passthru="true" />

        <copy todir="${dir.make}/">
            <fileset dir="." excludes="*.example,.git**,build**,**/*.sql,*.md,Kohana*,composer*,behat*,bin**,licenses**,features**,application/logs/*,application/cache/*,css/*.styl">
            </fileset>
        </copy>
    </target>

    <target name="install" description="Install the application">
        <reflexive>
            <fileset dir="${dir.install}" includes=".htaccess,application/bootstrap.php,application/config/database.php">
            </fileset>
            <filterchain>
                <replacetokens>
                    <token key="SUBDIR" value="${dir.sub}" />
                    <token key="DB_HOST" value="${db.host}" />
                    <token key="DB_USER" value="${db.user}" />
                    <token key="DB_PASS" value="${db.pass}" />
                    <token key="DB_NAME" value="${db.name}" />
                </replacetokens>
            </filterchain>
        </reflexive>
        <if>
            <equals arg1="${quirk.followsymlinks}" arg2="true" />
            <then>
                <reflexive>
                    <fileset dir="${dir.install}" includes=".htaccess">
                    </fileset>
                    <filterchain>
                        <replaceregexp>
                            <regexp pattern="Options \+FollowSymlinks" replace="Options +SymLinksIfOwnerMatch" />
                        </replaceregexp>
                    </filterchain>
                </reflexive>
            </then>
        </if>
        <if>
            <equals arg1="${quirk.rewriterule}" arg2="true" />
            <then>
                <reflexive>
                    <fileset dir="${dir.install}" includes=".htaccess">
                    </fileset>
                    <filterchain>
                        <replaceregexp>
                            <regexp pattern="RewriteRule \.\* index\.php/\$0 \[PT\]" replace="RewriteRule .* index.php [PT]" />
                        </replaceregexp>
                    </filterchain>
                </reflexive>
            </then>
        </if>
    </target>

    <target name="updatedb" description="Load the latest database data into the database">
        <exec command="mysqladmin -h ${db.host} -u${db.user} -p${db.pass} drop ${db.name}" passthru="true" />
        <exec command="mysql -h ${db.host} -u ${db.user} -p${db.pass} -e 'create database `${db.name}`'" passthru="true" />

        <exec command="mysql -h ${db.host} -u ${db.user} -p${db.pass} ${db.name} &lt; DATABASE.sql" passthru="true" />
    </target>

    <target name="deploy" description="Deploy the application">
        <if>
            <equals arg1="${deploy.type}" arg2="local" />
            <then>
                <move file="${dir.install}/" tofile="${deploy.location}" />
                <chown file="${deploy.location}" user="${chown.user}" group="${chown.group}" failonerror="false" />
                <if>
                    <equals arg1="${chmod.required}" arg2="true" />
                    <then>
                        <chmod file="${deploy.location}/application/logs" mode="0777" />
                        <chmod file="${deploy.location}/application/cache" mode="0777" />
                    </then>
                </if>
            </then>
        </if>
    </target>

    <target name="package" description="Build and package for distribution">
        <delete>
            <fileset dir="${dir.build}">
                <include name="package.*" />
            </fileset>
        </delete>
        <if>
            <equals arg1="${package.format}" arg2="tar" />
            <then>
                <tar basedir="${dir.install}" destfile="${dir.build}/package.tar" />
            </then>
            <elseif>
                <equals arg1="${package.format}" arg2="targz" />
                <then>
                    <tar basedir="${dir.install}" destfile="${dir.build}/package.tar.gz" compression="gzip" />
                </then>
            </elseif>
            <elseif>
                <equals arg1="${package.format}" arg2="tarbz2" />
                <then>
                    <tar basedir="${dir.install}" destfile="${dir.build}/package.tar.bz2" compression="bzip2" />
                </then>
            </elseif>
            <elseif>
                <equals arg1="${package.format}" arg2="zip" />
                <then>
                    <zip basedir="${dir.install}" destfile="${dir.build}/package.zip" />
                </then>
            </elseif>
        </if>
    </target>

    <target name="behat" description="Run Behat">
        <exec command="bin/behat -f progress --ansi" passthru="true" />
    </target>

    <target name="phplint" description="Run PHPLint">
        <phplint deprecatedAsError="true" tofile="${dir.reports}/phplint.log">
            <fileset dir="${dir.app}">
                <include name="**/*.php" />
            </fileset>
        </phplint>
    </target>

    <target name="phpcs" description="Run PHP_CodeSniffer">
        <phpcodesniffer standard="Kohana" file="${dir.app}">
            <formatter type="summary" usefile="false" />
            <formatter type="checkstyle" outfile="${dir.reports}/phpcs.xml" />
        </phpcodesniffer>
    </target>

    <target name="phpdepend" description="Run phpdepend">
        <phpdepend file="${dir.app}">
            <logger type="jdepend-xml" outfile="${dir.reports}/jdepend.xml" />
            <logger type="jdepend-chart" outfile="${dir.reports}/dependencies.svg" />
            <logger type="overview-pyramid" outfile="${dir.reports}/overview-pyramid.svg" />
        </phpdepend>
    </target>

    <target name="phpmd" description="Run phpmd">
        <phpmd rulesets="codesize,unusedcode,naming,design" file="${dir.app}">
            <formatter type="text" usefile="false" />
            <formatter type="xml" outfile="${dir.reports}/phpmd.xml" />
        </phpmd>
    </target>

    <target name="phpcpd" description="Run phpcpd">
        <phpcpd>
            <fileset dir="${dir.app}">
                <include name="**/*.php" />
            </fileset>
            <formatter type="default" usefile="false" />
            <formatter type="pmd" outfile="${dir.reports}/phpcpd.xml" />
        </phpcpd>
    </target>

    <target name="phpdcd" description="Run phpdcd">
        <exec command="phpdcd ${dir.app} | tee ${dir.reports}/phpdcd.log" passthru="true" />
    </target>

    <target name="phpdoc2" description="Run phpDocumentor2">
        <delete dir="${dir.docs}/" />
        <mkdir dir="${dir.docs}" />
        <phpdoc2 title="API Documentation" destdir="${dir.docs}">
            <fileset dir="${dir.app}">
                <include name="**/*.php" />
            </fileset>
        </phpdoc2>
    </target>

    <target name="main" description="Perform a full code analysis">
        <phingcall target="behat" />
        <phingcall target="phplint" />
        <phingcall target="phpcs" />
        <phingcall target="pdepend" />
        <phingcall target="phpmd" />
        <phingcall target="phpcpd" />
        <phingcall target="phpdcd" />
        <phingcall target="phpdoc2" />
    </target>
</project>
